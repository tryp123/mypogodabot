import telebot
from telebot import types
import config
import requests
from bs4 import BeautifulSoup as BS
import schedule
import time
import threading
import json
import os

bot = telebot.TeleBot(config.token)

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É —Ñ–∞–π–ª—ñ
data_file = 'user_data.json'
user_city = {}
user_timers = {}

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ñ–∞–π–ª—É
if os.path.exists(data_file):
    with open(data_file, 'r') as f:
        data = json.load(f)
        user_city = data.get('user_city', {})
        user_timers = data.get('user_timers', {})

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É —Ñ–∞–π–ª—ñ
def save_user_data():
    with open(data_file, 'w') as f:
        json.dump({'user_city': user_city, 'user_timers': user_timers}, f)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –ø–æ–≥–æ–¥–∏
def get_weather(city, days=1):
    url = f'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-{city}'
    try:
        r = requests.get(url)
        r.raise_for_status()
    except requests.exceptions.HTTPError:
        return None
    
    html = BS(r.content, 'html.parser')
    weather_data = []

    for day_id in range(1, days + 1):
        day_block = html.select_one(f'#bd{day_id}')
        if not day_block:
            continue
        
        day_info = {}
        day_info['day'] = day_block.select_one('.day-link').text
        day_info['date'] = day_block.select_one('.date').text
        day_info['month'] = day_block.select_one('.month').text
        day_info['min_temp'] = day_block.select_one('.temperature .min span').text
        day_info['max_temp'] = day_block.select_one('.temperature .max span').text
        day_info['weather_class'] = day_block.select_one('.weatherIco')['class'][1]
        day_info['img_url'] = 'https:' + day_block.select_one('.weatherImg')['src']
        weather_data.append(day_info)
    
    return weather_data

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –¥–µ—Ç–∞–ª—å–Ω–æ—ó –ø–æ–≥–æ–¥–∏
def get_detailed_weather(city):
    url = f'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-{city}'
    try:
        r = requests.get(url)
        r.raise_for_status()
    except requests.exceptions.HTTPError:
        return None

    html = BS(r.content, 'html.parser')
    weather_table = html.select_one('.weatherDetails')

    if not weather_table:
        return None

    rows = weather_table.find_all('tr')
    time_row = rows[1].find_all('td')
    temp_row = rows[3].find_all('td')
    wind_row = rows[7].find_all('td')
    rain_probability_row = rows[8].find_all('td')

    detailed_data = {
        'time': [cell.get_text(strip=True) for cell in time_row],
        'temperature': [cell.get_text(strip=True) for cell in temp_row],
        'wind': [cell.select_one('div').get_text(strip=True) if cell.select_one('div') else '' for cell in wind_row],
        'rain_probability': [cell.get_text(strip=True) for cell in rain_probability_row]
    }

    return detailed_data

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥–∏ –∑–∞ –¥–µ–Ω—å
def send_daily_weather(chat_id, weather_info, detailed_info):
    weather_message = f"üëã –ü–æ–≥–æ–¥–∞ –Ω–∞ {weather_info['day']} {weather_info['date']} {weather_info['month']}\n"
    weather_message += f"üìâ –ú—ñ–Ω.: {weather_info['min_temp']}\nüìà –ú–∞–∫—Å.: {weather_info['max_temp']}\n"

    bot.send_message(chat_id, weather_message)
    
    img_url = weather_info['img_url']
    weather_class = weather_info['weather_class']
    
    if weather_class == 'd000':
        bot.send_photo(chat_id, img_url, caption="–Ø—Å–Ω–æ")
    elif weather_class == 'd100':
        bot.send_photo(chat_id, img_url, caption="–ù–µ–≤–µ–ª–∏–∫–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å")
    elif weather_class == 'd200':
        bot.send_photo(chat_id, 'path/to/d200.gif', caption="–ú—ñ–Ω–ª–∏–≤–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å")
    elif weather_class == 'd210':
        bot.send_photo(chat_id, 'path/to/d210.gif', caption="–ú—ñ–Ω–ª–∏–≤–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å, –Ω–µ–≤–µ–ª–∏–∫–∏–π –¥–æ—â")
    elif weather_class == 'd240':
        bot.send_photo(chat_id, img_url, caption="–ú—ñ–Ω–ª–∏–≤–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å, –¥–æ—â, –º–æ–∂–ª–∏–≤—ñ –≥—Ä–æ–∑–∏")
    elif weather_class == 'd300':
        bot.send_photo(chat_id, 'path/to/d300.gif', caption="–•–º–∞—Ä–Ω–æ –∑ –ø—Ä–æ—è—Å–Ω–µ–Ω–Ω—è–º–∏")
    else:
        bot.send_message(chat_id, '–ù–∞–∂–∞–ª—å, —Ñ–æ—Ç–æ –Ω–µ –º–∞—î –≤ –±–∞–∑—ñ. –û—á—ñ–∫—É–π—Ç–µ –æ–Ω–æ–≤–ª–µ–Ω—å –±–æ—Ç–∞. ü´°')

    if detailed_info:
        detailed_message = "üìÖ –î–µ—Ç–∞–ª—å–Ω–∞ –ø–æ–≥–æ–¥–∞:\n"
        detailed_message += "```\n"
        detailed_message += f"{'–ß–∞—Å':<10} {'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞¬∞':<12} {'–í—ñ—Ç–µ—Ä(–º/—Å)':<12} {'–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤(%)':<18}\n"
        for i in range(len(detailed_info['time'])):
            detailed_message += f"{detailed_info['time'][i]:<10} {detailed_info['temperature'][i]:<12} {detailed_info['wind'][i]:<12} {detailed_info['rain_probability'][i]:<18}\n"
        detailed_message += "```"

        bot.send_message(chat_id, detailed_message, parse_mode='MarkdownV2')

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
def create_buttons():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    markup.add(types.KeyboardButton("/help"), types.KeyboardButton("/start"))
    return markup

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "üëã–ü—Ä–∏–≤—ñ—Ç! –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É:", reply_markup=create_buttons())

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help
@bot.message_handler(commands=['help'])
def help_message(message):
    bot.send_message(message.chat.id, "‚òÇÔ∏è–¶–µ –±–æ—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ–≥–æ–¥—É. –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ–≥–æ–¥—É.üëç")

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É
@bot.message_handler(content_types=['text'])
def get_city_weather(message):
    city = message.text.strip().lower().replace(' ', '-')
    user_city[message.chat.id] = city

    weather_data = get_weather(city)
    if not weather_data:
        bot.send_message(message.chat.id, "ü•≤–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É.")
        return

    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("üåû–ü–æ–≥–æ–¥–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", callback_data="weather_today"))
    markup.add(types.InlineKeyboardButton("‚ùÑÔ∏è–ü–æ–≥–æ–¥–∞ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å", callback_data="weather_week"))
    markup.add(types.InlineKeyboardButton("üì®–†–æ–∑—Å–∏–ª–∫–∞", callback_data="set_timer"))
    markup.add(types.InlineKeyboardButton("üîï–í–∏–º–∫–Ω—É—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É", callback_data="cancel_timer"))
    bot.send_message(message.chat.id, f"üôÇ–ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç: {city}. ü´±–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=markup)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        city = user_city.get(call.message.chat.id, None)
        if not city:
            bot.send_message(call.message.chat.id, "ü•≤–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        if call.data == "weather_today":
            weather_data = get_weather(city)
            if weather_data:
                detailed_info = get_detailed_weather(city)
                send_daily_weather(call.message.chat.id, weather_data[0], detailed_info)
            else:
                bot.send_message(call.message.chat.id, "ü•≤–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É.")
        elif call.data == "weather_week":
            weather_data = get_weather(city, days=7)
            if weather_data:
                for day_weather in weather_data:
                    send_daily_weather(call.message.chat.id, day_weather, None)
                    bot.send_message(call.message.chat.id, "(^._.^)Ôæâ")
            else:
                bot.send_message(call.message.chat.id, "ü•≤–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É.")
        elif call.data == "set_timer":
            if call.message.chat.id in user_timers:
                bot.send_message(call.message.chat.id, "ü•≤–£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞. –°–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–º—ñ–Ω—ñ—Ç—å —ó—ó.")
                return
            markup = types.InlineKeyboardMarkup(row_width=4)
            for hour in range(24):
                markup.add(types.InlineKeyboardButton(f"{hour:02d}:00", callback_data=f"timer_{hour:02d}:00"))
            markup.add(types.InlineKeyboardButton("üö™–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_main"))
            bot.send_message(call.message.chat.id, "‚åö–í–∏–±–µ—Ä—ñ—Ç—å —á–∞—Å –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏:", reply_markup=markup)
        elif call.data == "back_to_main":
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton("üåû–ü–æ–≥–æ–¥–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", callback_data="weather_today"))
            markup.add(types.InlineKeyboardButton("‚ùÑÔ∏è–ü–æ–≥–æ–¥–∞ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å", callback_data="weather_week"))
            markup.add(types.InlineKeyboardButton("üì®–†–æ–∑—Å–∏–ª–∫–∞", callback_data="set_timer"))
            markup.add(types.InlineKeyboardButton("üîï–í–∏–º–∫–Ω—É—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É", callback_data="cancel_timer"))
            bot.send_message(call.message.chat.id, "üö™–ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", reply_markup=markup)
        elif call.data.startswith("timer_"):
            time_str = call.data.split("_")[1]
            user_timers[call.message.chat.id] = time_str
            save_user_data()
            schedule_daily_weather(call.message.chat.id, time_str)
            bot.send_message(call.message.chat.id, f"üì©–©–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –Ω–∞ {time_str}.")
        elif call.data == "cancel_timer":
            if call.message.chat.id in user_timers:
                del user_timers[call.message.chat.id]
                save_user_data()
                bot.send_message(call.message.chat.id, "ü´°–©–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É –≤–∏–º–∫–Ω–µ–Ω–æ.")
            else:
                bot.send_message(call.message.chat.id, "ü•≤–†–æ–∑—Å–∏–ª–∫–∞ –Ω–µ –±—É–ª–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ–≥–æ–¥–∏
def schedule_daily_weather(chat_id, time_str):
    def job():
        city = user_city.get(chat_id, None)
        if city:
            weather_data = get_weather(city)
            if weather_data:
                detailed_info = get_detailed_weather(city)
                send_daily_weather(chat_id, weather_data[0], detailed_info)

    schedule.every().day.at(time_str).do(job)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É —à–µ–¥—É–ª–µ—Ä–∞ —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)

# –ó–∞–ø—É—Å–∫ —à–µ–¥—É–ª–µ—Ä–∞ —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
scheduler_thread = threading.Thread(target=run_scheduler)
scheduler_thread.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
